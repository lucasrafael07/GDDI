# -*- coding: utf-8 -*-
"""
Script para testar isoladamente a query de devolu√ß√µes
Execute para identificar problemas espec√≠ficos na estrutura do banco
"""

from aurora_iqvia.db import AppConfig, connect_oracle
from datetime import date, timedelta

def test_devolucoes_query():
    """Testa apenas a query de devolu√ß√µes para identificar problemas"""
    
    print("üîç TESTE ISOLADO - QUERY DE DEVOLU√á√ïES")
    print("=" * 50)
    
    cfg = AppConfig.load()
    dia_teste = date.today() - timedelta(days=1)
    
    print(f"üìÖ Testando dia: {dia_teste.strftime('%d/%m/%Y')}")
    print(f"üè¢ Filial: {cfg.codfilial}")
    
    # Query simplificada para teste
    query_teste = """
    SELECT COUNT(*) as TOTAL_REGISTROS
    FROM PRISMA.PCNFENT
    WHERE NVL(PCNFENT.CODFILIALNF, PCNFENT.CODFILIAL) = :CODFILIAL
      AND PCNFENT.TIPODESCARGA IN ('6', '7', 'T')
      AND NVL(PCNFENT.OBS, 'X') <> 'NF CANCELADA'
      AND PCNFENT.CODFISCAL IN ('131', '132', '231', '232', '199', '299')
      AND TRUNC(PCNFENT.DTENT) = :DIA
    """
    
    try:
        print("üîå Conectando ao Oracle...")
        conn = connect_oracle(cfg)
        print(f"‚úÖ Conectado: {conn.version}")
        
        # Teste 1: Verificar se existem registros b√°sicos
        print("\n1Ô∏è‚É£ TESTE: Registros b√°sicos em PCNFENT")
        cur = conn.cursor()
        cur.execute(query_teste, {'DIA': dia_teste, 'CODFILIAL': cfg.codfilial})
        resultado = cur.fetchone()
        print(f"   üìä Total de registros PCNFENT: {resultado[0]}")
        
        if resultado[0] == 0:
            print("   ‚ö†Ô∏è Nenhuma devolu√ß√£o encontrada para o dia testado")
            print("   üí° Tentando √∫ltimos 7 dias...")
            
            for i in range(1, 8):
                dia_anterior = dia_teste - timedelta(days=i)
                cur.execute(query_teste, {'DIA': dia_anterior, 'CODFILIAL': cfg.codfilial})
                resultado_anterior = cur.fetchone()
                if resultado_anterior[0] > 0:
                    print(f"   üìÖ {dia_anterior.strftime('%d/%m/%Y')}: {resultado_anterior[0]} devolu√ß√µes")
                    dia_teste = dia_anterior  # Usar este dia para testes seguintes
                    break
        
        # Teste 2: Verificar estrutura das tabelas relacionadas
        print("\n2Ô∏è‚É£ TESTE: Estrutura das tabelas")
        
        # Verificar se PCESTCOM existe
        try:
            cur.execute("SELECT COUNT(*) FROM PRISMA.PCESTCOM WHERE ROWNUM = 1")
            print("   ‚úÖ PCESTCOM: OK")
        except Exception as e:
            print(f"   ‚ùå PCESTCOM: {e}")
        
        # Verificar se existe campo CODDEVOL
        try:
            cur.execute("SELECT CODDEVOL FROM PRISMA.PCNFENT WHERE ROWNUM = 1")
            print("   ‚úÖ PCNFENT.CODDEVOL: OK")
        except Exception as e:
            print(f"   ‚ùå PCNFENT.CODDEVOL: {e}")
            print("   üí° Campo CODDEVOL n√£o existe - query ser√° ajustada")
        
        # Verificar se PCTABDEV existe
        try:
            cur.execute("SELECT COUNT(*) FROM PRISMA.PCTABDEV WHERE ROWNUM = 1")
            print("   ‚úÖ PCTABDEV: OK")
        except Exception as e:
            print(f"   ‚ùå PCTABDEV: {e}")
            print("   üí° Tabela PCTABDEV n√£o existe - ser√° ignorada")
        
        # Teste 3: Query simplificada sem JOINs problem√°ticos
        print("\n3Ô∏è‚É£ TESTE: Query simplificada")
        
        query_simples = """
        SELECT PCNFENT.CODFILIAL,
               PCNFENT.NUMNOTA,
               PCNFENT.DTENT,
               PCNFENT.CODFORNEC
        FROM PRISMA.PCNFENT
        WHERE NVL(PCNFENT.CODFILIALNF, PCNFENT.CODFILIAL) = :CODFILIAL
          AND PCNFENT.TIPODESCARGA IN ('6', '7', 'T')
          AND NVL(PCNFENT.OBS, 'X') <> 'NF CANCELADA'
          AND PCNFENT.CODFISCAL IN ('131', '132', '231', '232', '199', '299')
          AND TRUNC(PCNFENT.DTENT) = :DIA
          AND ROWNUM <= 5
        """
        
        cur.execute(query_simples, {'DIA': dia_teste, 'CODFILIAL': cfg.codfilial})
        rows = cur.fetchall()
        
        if rows:
            print(f"   ‚úÖ Query simples funcionou: {len(rows)} registros")
            for row in rows:
                print(f"      - Filial: {row[0]}, Nota: {row[1]}, Data: {row[2]}")
        else:
            print("   ‚ö†Ô∏è Query simples n√£o retornou dados")
        
        # Teste 4: Sugerir query corrigida
        print("\n4Ô∏è‚É£ SUGEST√ÉO: Query corrigida")
        
        query_corrigida = """
        SELECT DISTINCT
               PCNFENT.CODFILIAL,
               COALESCE(PCCLIENT.CLIENTE, 'CLIENTE NAO IDENTIFICADO') AS CLIENTE,
               COALESCE(PCCLIENT.CODCLI, 0) AS CODCLI,
               COALESCE(PCCLIENT.CGCENT, '') AS CGCENT,
               PCMOV.CODPROD,
               PCPRODUT.CODAUXILIAR,
               PCPRODUT.DESCRICAO,
               PCMOV.QT,
               PCNFENT.NUMNOTA,
               PCNFENT.DTENT AS DTSAIDA
        FROM PRISMA.PCNFENT
        INNER JOIN PRISMA.PCESTCOM ON PCESTCOM.NUMTRANSENT = PCNFENT.NUMTRANSENT
        INNER JOIN PRISMA.PCMOV ON PCESTCOM.NUMTRANSENT = PCMOV.NUMTRANSENT
        INNER JOIN PRISMA.PCPRODUT ON PCMOV.CODPROD = PCPRODUT.CODPROD
        LEFT JOIN PRISMA.PCCLIENT ON PCNFENT.CODFORNEC = PCCLIENT.CODCLI
        WHERE NVL(PCNFENT.CODFILIALNF, PCNFENT.CODFILIAL) = :CODFILIAL
          AND PCNFENT.TIPODESCARGA IN ('6', '7', 'T')
          AND NVL(PCNFENT.OBS, 'X') <> 'NF CANCELADA'
          AND PCNFENT.CODFISCAL IN ('131', '132', '231', '232', '199', '299')
          AND PCMOV.DTCANCEL IS NULL
          AND PCPRODUT.CODAUXILIAR IS NOT NULL
          AND PCPRODUT.CODEPTO <> 196
          AND TRUNC(PCNFENT.DTENT) = :DIA
          AND ROWNUM <= 10
        """
        
        try:
            cur.execute(query_corrigida, {'DIA': dia_teste, 'CODFILIAL': cfg.codfilial})
            rows_corrigida = cur.fetchall()
            
            if rows_corrigida:
                print(f"   ‚úÖ Query corrigida funcionou: {len(rows_corrigida)} registros")
                print("   üìù Estrutura encontrada:")
                for i, row in enumerate(rows_corrigida[:3]):
                    print(f"      {i+1}. Filial: {row[0]}, Cliente: {row[1]}, Produto: {row[4]}, Qty: {row[7]}")
            else:
                print("   ‚ö†Ô∏è Query corrigida n√£o retornou dados")
                
        except Exception as e:
            print(f"   ‚ùå Erro na query corrigida: {e}")
        
        print("\n‚úÖ TESTE CONCLU√çDO")
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False
    finally:
        try:
            conn.close()
            print("üîå Conex√£o fechada")
        except:
            pass
    
    return True

if __name__ == "__main__":
    test_devolucoes_query()